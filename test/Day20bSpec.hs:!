module Day20b
    where
import Data.List

type Tile = (Int,[String])
type Column = [[String]]
type Mosaic = [Column]

match :: Tile -> Tile -> Bool
match (_,t) (_,u) = last t == head u


rotate,vertFlip,horzFlip :: [[a]] -> [[a]]
rotate = reverse . transpose
vertFlip = map reverse
horzFlip = reverse

transformations :: Tile -> [Tile]
transformations (i,t) = map (\f -> (i,f t)) 
                            [ id
                            , rotate
                            , vertFlip
                            , horzFlip
                            , horzFlip . rotate
                            , vertFlip . rotate
                            , horzFlip . vertFlip
                            , horzFlip . vertFlip . rotate]

possibleMatches :: Tile -> Tile -> [(Tile,Tile)]
possibleMatches t u = 
    [(tt,tu) 
    | tt <- transformations t
    , tu <- transformations u
    , t /= u
    , tt `match` tu]

matchCount :: Tile -> [Tile] -> Int
matchCount t ts = length [u | u <- ts, u /= t, not $ null (possibleMatches t u)]

matchers :: Tile -> [Tile] -> [Tile]
matchers t ts = [u | u <- ts, u /= t, not $ null (possibleMatches t u)]

centers :: [Tile] -> [Tile]
centers ts = [t | t <- ts, (matchCount t ts) == 4]

corners :: [Tile] -> [Tile]
corners ts = [t | t <- ts, (matchCount t ts) == 2]

borders :: [Tile] -> [Tile]
borders ts = [t | t <- ts, (matchCount t ts) == 3]

borderRows:: Tile -> Tile -> [Tile] -> [[Tile]]
borderRows c b ts = borderRows' [[c,b]] 
    where
        borderRows' :: [[Tile]] -> [[Tile]]
        borderRows' tts | (tts >>= addNextTile) == tts = tts
                        | otherwise = borderRows' (tts >>= addNextTile)
        addNextTile :: [Tile] -> [[Tile]]
        addNextTile tiles = case (matchers (last tiles) ((borders ts) `minus` tiles)) of
                              [] -> return tiles
                              ms -> map ((tiles++) . return) ms


nextRow :: [Tile] -> [Tile] -> [Tile] -> [Tile]
nextRow rs as ts = foldl nextTile [] rs
    where
        nextTile :: [Tile] -> Tile -> [Tile]
        nextTile ns t = ns ++ filter (not . (`elem` (as ++ ns))) (matchers t ts)
                          
minus :: Eq a => [a] -> [a] -> [a]
minus xs ms = filter (not . (`elem` ms)) xs

rows :: [Tile] -> [[Tile]]
rows = undefined

interpret :: [String] -> [Tile]
interpret text = map readTile gs
    where
        gs = groupBy (\_ t -> not (':' `elem` t))  (filter (not . null) text)
        readTile ss = (number (head ss),tail ss) 
            where
                number  = read . drop 5 . init
